<?php
	Class extension_parametrisator extends Extension{
	
		public function about() {
			return array('name' => __('Parametrisator'),
						 'version' => '1.3',
						 'release-date' => '2012-06-25',
						 'author' => array('name' => 'Marcin Konicki',
										   'website' => 'http://ahwayakchih.neoni.net',
										   'email' => 'ahwayakchih@neoni.net'),
						 'description' => __('Allows to specify XPath(s) for any data-source. Each XPath will be used to select data from XML that was generated by that data-source. Selected data will be added to the parameter pool used by all data-sources.')
			);
		}

		public function uninstall() {
		}
		
		public function update($previousVersion) {
			return true;
		}

		public function install() {
			return true;
		}

		public function getSubscribedDelegates() {
			return array(
				array(
					'page' => '/backend/',
					'delegate' => 'InitaliseAdminPageHead',
					'callback' => 'addJavaScriptAndCSS'
				),
				array(
					'page' => '/blueprints/datasources/',
					'delegate' => 'DatasourcePreCreate',
					'callback' => 'appendDataSourceParameters'
				),
				array(
					'page' => '/blueprints/datasources/',
					'delegate' => 'DatasourcePreEdit',
					'callback' => 'appendDataSourceParameters'
				),
				array(
					'page' => '/frontend/',
					'delegate' => 'DataSourcePostExecute',
					'callback' => 'generateParameters'
				),
			);
		}

		public function addJavaScriptAndCSS() {
			$callback = Symphony::Engine()->getPageCallback();
			if ($callback['driver'] != 'blueprintsdatasources' || !is_array($callback['context']) || empty($callback['context'])) return;

			// Find data source handle.
			$handle = NULL;
			if ($callback['context'][0] == 'edit' && !empty($callback['context'][1])) {
				$handle = $callback['context'][1];
			}

			// Find current XPath values.
			$parametrisator = array('xslt' => false, 'xpaths' => array());
			if (isset($_POST['parametrisator'])) {
				$parametrisator['xslt'] = $_POST['parametrisator']['xslt'];
				if (isset($_POST['parametrisator']['xpaths']) && isset($_POST['parametrisator']['xpaths']['name'])) {
					$parametrisator['xpaths'] = array_combine($_POST['parametrisator']['xpaths']['name'], $_POST['parametrisator']['xpaths']['xpath']);
				}
				else {
					$parametrisator['xpaths'] = array();
				}
			}
			else if (!empty($handle)) {
				$existing = DatasourceManager::create($handle, NULL, false);
				if (!empty($existing)) {
					if (is_array($existing->dsParamParametrisator)) {
						$parametrisator = $existing->dsParamParametrisator;
					}
					if (!empty($existing->dsParamROOTELEMENT)) {
						$handle = $existing->dsParamROOTELEMENT;
					}
				}
			}

			// Remove empty values
			$parametrisator['xpaths'] = array_filter($parametrisator['xpaths']);

			// Get list of utilities
			$xsltfile = $parametrisator['xslt'];
			$parametrisator['xslt'] = '<option value="">'.__('Disabled').'</option>';

			$utilities = General::listStructure(UTILITIES, array('xsl'), false, 'asc', UTILITIES);
			if (is_array($utilities) && is_array($utilities['filelist'])) {
				foreach ($utilities['filelist'] as $utility) {
					$parametrisator['xslt'] .= '<option value="'.$utility.'"'.($xsltfile == $utility ? ' selected="selected"' : '').'>'.$utility.'</option>';
				}
			}

			// Let our script know sort and order values.
			Administration::instance()->Page->addElementToHead(
				new XMLElement(
					'script',
					"Symphony.Context.add('parametrisator', " . json_encode(array('xslt' => $parametrisator['xslt'], 'xpaths' => $parametrisator['xpaths'], 'handle' => $handle)) . ");",
					array('type' => 'text/javascript')
				), 100
			);

			// Append scripts and styles for field settings pane
			Administration::instance()->Page->addScriptToHead(URL . '/extensions/parametrisator/assets/parametrisator.settings.js', 101, false);
		}

		public function appendDataSourceParameters(&$context) {
/*
						'file' => $file,
						'contents' => &$dsShell,
						'params' => $params,
						'elements' => $elements,
						'filters' => $filters,
						'dependencies' => $dependencies
*/
			if (!isset($_POST['parametrisator']['xpaths']) || empty($_POST['parametrisator']['xpaths'])) return;

			if (!empty($_POST['parametrisator']['xslt'])) {
				$XSLT = UTILITIES . '/'. preg_replace(array('%/+%', '%(^|/)\.\./%'), '/', $_POST['parametrisator']['xslt']);
				if (file_exists($XSLT)) $parametrisator['xslt'] = $_POST['parametrisator']['xslt'];
			}
			else {
				$parametrisator['xslt'] = false;
			}

			$parametrisator['xpaths'] = array_filter(array_combine(array_map(array('Lang', 'createHandle'), $_POST['parametrisator']['xpaths']['name']), $_POST['parametrisator']['xpaths']['xpath']));
			if (empty($parametrisator['xpaths'])) return;

			$parametrisator = preg_replace(array("/\n  /", "/\n\)\s*$/"), array("\n\t\t\t", "\n\t\t);"), var_export($parametrisator, true))."\n";

			// Store XPaths in data-source
			$context['contents'] = preg_replace('/public \$dsParamROOTELEMENT [^\n]+\n/', '$0		public \$dsParamParametrisator = '.$parametrisator, $context['contents']);

			// Update dependencies
			// From content.blueprintsdatasources.php
			if(preg_match_all('@(\$ds-[-_0-9a-z]+)@i', $parametrisator, $matches)){
				if (!is_array($context['dependencies'])) $context['dependencies'] = array();
				$context['dependencies'] = General::array_remove_duplicates(array_merge($matches[1], $context['dependencies']));
				$context['contents'] = preg_replace('/'.preg_quote('$this->_dependencies = array(').'[^\)]*\);/', '$this->_dependencies = array(\''.implode("', '", $context['dependencies']).'\');', $context['contents']);
			}
		}

		public function generateParameters(&$context) {
/*
						'datasource' => $ds,
						'xml' => &$xml,
						'param_pool' => &$this->_env['pool']
*/
			if (empty($context) || !isset($context['xml']) || !isset($context['datasource'])
				|| empty($context['xml'])
				|| !isset($context['datasource']->dsParamParametrisator)
				|| !isset($context['datasource']->dsParamParametrisator['xpaths'])
//				|| strpos($context['xml'], '<error>') === FALSE // We cannot depend on $this->_force_empty_result because we're not in the datasource scope (and that's a protected variable, and if it weren't, it could be changed by other code by now :(.
			) return;

			$xml = NULL;
			if (is_object($context['xml'])) {
				$xml = $context['xml']->generate(false);
			}
			else {
				$xml = $result;
			}

			$dom = new DOMDocument();
			$dom->strictErrorChecking = false;
			$dom->loadXML($xml);

			if (!empty($context['datasource']->dsParamParametrisator['xslt'])) {
				$XSLTfilename = UTILITIES . '/'. preg_replace(array('%/+%', '%(^|/)../%'), '/', $context['datasource']->dsParamParametrisator['xslt']);
				if (file_exists($XSLTfilename)) {
					$XSLProc = new XsltProcessor;
	
					$xslt = new DomDocument;
					$xslt->load($XSLTfilename);

					$XSLProc->importStyleSheet($xslt);

					// Set some context
					$XSLProc->setParameter('', array(
						'rootelement' => $context['datasource']->dsParamROOTELEMENT,
						'source' => $context['datasource']->getSource()
					));

					$temp = $XSLProc->transformToDoc($dom);

					if ($temp instanceof DOMDocument) {
						$dom = $temp;
					}
				}
			}

			$xpath = new DOMXPath($dom);
			foreach($context['datasource']->dsParamParametrisator['xpaths'] as $handle => $query) {
				$query = $context['datasource']->__processParametersInString($query, array('env' => Frontend::Page()->Env(), 'param' => Frontend::Page()->Params()));

				$data = $xpath->query($query);
				if ($data === FALSE) continue;

				$key = "ds-" . $context['datasource']->dsParamROOTELEMENT . "-" . $handle;
				if(!is_array($context['param_pool'][$key])) $context['param_pool'][$key] = array();

				foreach ($data as $node) {
					$context['param_pool'][$key][] = $node->nodeValue;
				}
			}
		}
	}

