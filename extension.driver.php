<?php
	Class extension_parametrisator extends Extension{
	
		public function about() {
			return array('name' => __('Parametrisator'),
						 'version' => '1.1',
						 'release-date' => '2011-09-12',
						 'author' => array('name' => 'Marcin Konicki',
										   'website' => 'http://ahwayakchih.neoni.net',
										   'email' => 'ahwayakchih@neoni.net'),
						 'description' => __('Allows to specify XPath(s) for any data-source. Each XPath will be used to select data from XML that was generated by data-source. Selected data will be added to the parameter pool used by all data-sources.')
			);
		}

		public function uninstall() {
			return General::deleteFile(MANIFEST . '/parametrisator');
		}
		
		public function update($previousVersion) {
			return true;
		}

		public function install() {
			return true;
		}

		public function getSubscribedDelegates() {
			return array(
				array(
					'page' => '/backend/',
					'delegate' => 'InitaliseAdminPageHead',
					'callback' => 'addJavaScriptAndCSS'
				),
				array(
					'page' => '/blueprints/datasources/',
					'delegate' => 'DatasourcePreCreate',
					'callback' => 'appendDataSourceParameters'
				),
				array(
					'page' => '/blueprints/datasources/',
					'delegate' => 'DatasourcePreEdit',
					'callback' => 'appendDataSourceParameters'
				),
			);
		}

		public function addJavaScriptAndCSS() {
			$callback = Symphony::Engine()->getPageCallback();
			if ($callback['driver'] != 'blueprintsdatasources' || !is_array($callback['context'])) return;

			// Find data source handle.
			$handle = NULL;
			if ($callback['context'][0] == 'edit' && !empty($callback['context'][1])) {
				$handle = $callback['context'][1];
			}

			// Find current XPath values.
			$parametrisator = array('xslt' => false, 'xpaths' => array());
			if (isset($_POST['parametrisator'])) {
				$parametrisator['xslt'] = $_POST['parametrisator']['xslt'];
				if (isset($_POST['parametrisator']['xpaths']) && isset($_POST['parametrisator']['xpaths']['name'])) {
					$parametrisator['xpaths'] = array_combine($_POST['parametrisator']['xpaths']['name'], $_POST['parametrisator']['xpaths']['xpath']);
				}
				else {
					$parametrisator['xpaths'] = array();
				}
			}
			else if (!empty($handle)) {
				$datasourceManager = new DatasourceManager(Symphony::Engine());
				$existing =& $datasourceManager->create($handle, NULL, false);
				if (!empty($existing)) {
					if (is_array($existing->dsParamParametrisator)) {
						$parametrisator = $existing->dsParamParametrisator;
					}
					if (!empty($existing->dsParamROOTELEMENT)) {
						$handle = $existing->dsParamROOTELEMENT;
					}
				}
			}

			// Remove empty values
			$parametrisator['xpaths'] = array_filter($parametrisator['xpaths']);

			// Get list of utilities
			$utilities = General::listStructure(UTILITIES, array('xsl'), false, 'asc', UTILITIES);
			$utilities = $utilities['filelist'];

			$xsltfile = $parametrisator['xslt'];
			$parametrisator['xslt'] = '<option value="">'.__('Disabled').'</option>';

			foreach ($utilities as $utility) {
				$parametrisator['xslt'] .= '<option value="'.$utility.'"'.($xsltfile == $utility ? ' selected="selected"' : '').'>'.$utility.'</option>';
			}

			// Let our script know sort and order values.
			Administration::instance()->Page->addElementToHead(
				new XMLElement(
					'script',
					"Symphony.Context.add('parametrisator', " . json_encode(array('xslt' => $parametrisator['xslt'], 'xpaths' => $parametrisator['xpaths'], 'handle' => $handle)) . ");",
					array('type' => 'text/javascript')
				), 100
			);

			// Append scripts and styles for field settings pane
			Administration::instance()->Page->addScriptToHead(URL . '/extensions/parametrisator/assets/parametrisator.settings.js', 101, false);
		}

		public function appendDataSourceParameters(&$context) {
/*
						'file' => $file,
						'contents' => &$dsShell,
						'params' => $params,
						'elements' => $elements,
						'filters' => $filters,
						'dependencies' => $dependencies
*/
			if (!isset($_POST['parametrisator']['xpaths']) || empty($_POST['parametrisator']['xpaths'])) return;

			if (!empty($_POST['parametrisator']['xslt'])) {
				$XSLT = UTILITIES . '/'. preg_replace(array('%/+%', '%(^|/)../%'), '/', $_POST['parametrisator']['xslt']);
				if (file_exists($XSLT)) $parametrisator['xslt'] = $_POST['parametrisator']['xslt'];
			}
			else {
				$parametrisator['xslt'] = false;
			}

			$parametrisator['xpaths'] = array_filter(array_combine(array_map(array('Lang', 'createHandle'), $_POST['parametrisator']['xpaths']['name']), $_POST['parametrisator']['xpaths']['xpath']));
			if (empty($parametrisator['xpaths'])) return;

			$parametrisator = preg_replace(array("/\n  /", "/\n\)\s*$/"), array("\n\t\t\t", "\n\t\t);"), var_export($parametrisator, true))."\n";

			// Store XPaths in data-source
			$context['contents'] = preg_replace('/public \$dsParamROOTELEMENT [^\n]+\n/', '$0		public \$dsParamParametrisator = '.$parametrisator, $context['contents']);

			// Update dependencies
			// From content.blueprintsdatasources.php
			if(preg_match_all('@(\$ds-[-_0-9a-z]+)@i', $parametrisator, $matches)){
				if (!is_array($context['dependencies'])) $context['dependencies'] = array();
				$context['dependencies'] = General::array_remove_duplicates(array_merge($matches[1], $context['dependencies']));
				$context['contents'] = preg_replace('/'.preg_quote('$this->_dependencies = array(').'[^\)]*\);/', '$this->_dependencies = array(\''.implode("', '", $context['dependencies']).'\');', $context['contents']);
			}

			// Modify data-source grab() to make it output additional parameters
			$this->injectPHP($context['contents']);
		}

		// Code based on: http://stackoverflow.com/questions/2751032/how-to-get-the-entire-function-from-a-file/2751170#2751170
		private function injectPHP(&$php) {
			$tokens = token_get_all($php);

			$found = 0;
			$count = count($tokens);
			$code = array();
			$injectCodeAt = false;
			$depth = 0;
			for ($i = 0; $i < $count; $i++) {
				if ($found > 0) {
					if (is_array($tokens[$i])) {
						$code[] = $tokens[$i][1];
						if ($tokens[$i][0] == T_RETURN && $found == 1 && $depth == 1
							&& is_array($tokens[$i+1]) && $tokens[$i+1][0] == T_WHITESPACE
							&& is_array($tokens[$i+2]) && $tokens[$i+2][1] == '$result'
							&& $tokens[$i+3] == ';'
							&& ($tokens[$i+4] == '}' || $tokens[$i+5] == '}')) {
							$injectCodeAt = count($code) - 1;
							if (is_array($tokens[$i-1]) && $tokens[$i-1][0] == T_WHITESPACE) $injectCodeAt--;
						}
					}
					else {
						$code[] = $tokens[$i];
						if ($tokens[$i] == '{') {
							$depth++;
							if ($found == 2) $found = 1;
						}
						else if ($tokens[$i] == '}') {
							$depth--;
							if ($depth <= 0 && $found == 1) break;
						}
					}
				}
				else if (is_array($tokens[$i]) && $tokens[$i][0] == T_PUBLIC
					&& is_array($tokens[$i+1]) && $tokens[$i+1][0] == T_WHITESPACE
					&& is_array($tokens[$i+2]) && $tokens[$i+2][0] == T_FUNCTION
					&& is_array($tokens[$i+3]) && $tokens[$i+3][0] == T_WHITESPACE
					&& is_array($tokens[$i+4]) && $tokens[$i+4][1] == 'grab') {
					$found = 2;
					$code[] = $tokens[$i][1];
				}
			}

			$inject = '

			// Parametrisator: start
			if (!$this->_force_empty_result && is_array($this->dsParamParametrisator[\'xpaths\'])) {
				$xml = NULL;
				if (is_object($result)) {
					$xml = $result->generate(true);
				}
				else if (!empty($result)) {
					$xml = $result;
				}

				$dom = new DOMDocument();
				$dom->strictErrorChecking = false;
				$dom->loadXML($xml);

				if (!empty($this->dsParamParametrisator[\'xslt\'])) {
					$XSLTfilename = UTILITIES . \'/\'. preg_replace(array(\'%/+%\', \'%(^|/)../%\'), \'/\', $this->dsParamParametrisator[\'xslt\']);
					if (file_exists($XSLTfilename)) {
						$XSLProc = new XsltProcessor;
	
						$xslt = new DomDocument;
						$xslt->load($XSLTfilename);

						$XSLProc->importStyleSheet($xslt);

						// Set some context
						$XSLProc->setParameter(\'\', array(
							\'rootelement\' => $this->dsParamROOTELEMENT,
							\'source\' => $this->getSource()
						));

						$temp = $XSLProc->transformToDoc($dom);

						if ($temp instanceof DOMDocument) {
							$dom = $temp;
						}
					}
				}

				$xpath = new DOMXPath($dom);
				foreach($this->dsParamParametrisator[\'xpaths\'] as $handle => $query) {
					$query = $this->__processParametersInString($query, $this->_env);

					$data = $xpath->query($query);
					if ($data === FALSE) continue;

					$key = "ds-" . $this->dsParamROOTELEMENT . "-" . $handle;
					if(!is_array($param_pool[$key])) $param_pool[$key] = array();

					foreach ($data as $node) {
						$param_pool[$key][] = $node->nodeValue;
					}
				}
			}
			// Parametrisator: end';

			if ($found == 1 && $injectCodeAt > 0) {
				$from = implode('', $code);
				array_splice($code, $injectCodeAt, 0, array($inject));
				$php = str_replace($from, implode('', $code), $php);
			}
		}

	}

